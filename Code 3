
from keras import layers #small convnet for atora vs. californium vs. graf classification
from keras import models
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3))) #first convolution layer with 3×3 filter; 32 - depth of maps,
model.add(layers.MaxPooling2D((2, 2))) #MaxPooling - size 2×2 object map size 148x148
model.add(Dropout(0.2)) #20% of layers abandoned
model.add(layers.Conv2D(64, (3, 3), activation='relu')) #secend convolution layer with 3×3 filter; 64 - depth of maps, 
model.add(layers.MaxPooling2D((2, 2))) #MaxPooling,
model.add(Dropout(0.2)) #20% of layers abandoned
model.add(layers.Conv2D(128, (3, 3), activation='relu')) #third convolution layer with 3×3 filter; 128 - depth of maps,
model.add(layers.MaxPooling2D((2, 2))) #MaxPooling,
model.add(Dropout(0.2)) #20% of layers abandoned
model.add(layers.Conv2D(128, (3, 3), activation='relu')) #fourth convolution layer with 3×3 filter; 128 - depth of maps,
model.add(layers.MaxPooling2D((2, 2))) #MaxPooling,
model.add(Dropout(0.2)) #20% of layers abandoned 
model.add(layers.Flatten()) #As you can see, the (3, 3, 64) outputs are flattened into vectors of shape (576) before going through two Dense layers.
model.add(layers.Dense(512, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))
model.summary()
from keras import optimizers
model.compile(loss='binary_crossentropy',
              optimizer=optimizers.RMSprop(lr=1e-4),
              metrics=['acc'])
from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255) #Scales all images by 1/255
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(200, 200),
    batch_size=20,
    class_mode='binary') #Creation of binary labels 
validation_generator = test_datagen.flow_from_directory(
    validation_dir, 
    target_size=(200, 200), 
    batch_size=20,
    class_mode='binary')
import scipy
for data_batch, labels_batch in train_generator:
    print('data batch shape:', data_batch.shape)
    print('labels batch shape:', labels_batch.shape)
history = model.fit_generator(
    train_generator,
    steps_per_epoch=100,
    epochs=30, #epoch – jedna epoka oznacza przejście całego zbioru przez sieć oraz powrót
    validation_data=validation_generator,
    validation_steps=50)
model.save('atora_and_californium_and_graf_small_1.h5') #Saving the model

Code 3. Programming code for the calculation function of the proposed CNN for the classification of rapeseed varieties 
